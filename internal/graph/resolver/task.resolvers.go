package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"

	"github.com/msoft-g1/todo-list-backend/internal/domain/task"
	"github.com/msoft-g1/todo-list-backend/internal/domain/user"
	"github.com/msoft-g1/todo-list-backend/internal/graph/modelgen"
)

// TaskCreate is the resolver for the taskCreate field.
func (r *mutationResolver) TaskCreate(ctx context.Context, input task.CreateInput) (*modelgen.TaskCreatePayload, error) {
	authData := user.AuthForContext(ctx)
	if authData == nil {
		return nil, user.ErrAccessDenied
	}
	taskCreated, err := r.TasksService.CreateTask(&task.CreateInput{
		Description: input.Description,
		UserID:      authData.UserID,
	})
	if err != nil {
		// TODO
		return &modelgen.TaskCreatePayload{}, nil
	}
	return &modelgen.TaskCreatePayload{Task: taskCreated}, nil
}

// TaskUpdate is the resolver for the taskUpdate field.
func (r *mutationResolver) TaskUpdate(ctx context.Context, taskID uint, input task.UpdateInput) (*modelgen.TaskUpdatePayload, error) {
	authData := user.AuthForContext(ctx)
	if authData == nil {
		return nil, user.ErrAccessDenied
	}
	t, err := r.TasksService.GetTaskByID(taskID)
	if err != nil {
		// TODO
		return &modelgen.TaskUpdatePayload{}, nil
	}
	if t.UserID != authData.UserID {
		return nil, user.ErrAccessDenied
	}
	updatedTask, err := r.TasksService.UpdateTask(taskID, &task.UpdateInput{
		Description: input.Description,
		Completed:   input.Completed,
	})
	if err != nil {
		// TODO
		return &modelgen.TaskUpdatePayload{}, nil
	}
	return &modelgen.TaskUpdatePayload{Task: updatedTask}, nil
}

// TaskDelete is the resolver for the taskDelete field.
func (r *mutationResolver) TaskDelete(ctx context.Context, taskID uint) (*modelgen.TaskDeletePayload, error) {
	panic(fmt.Errorf("not implemented: TaskDelete - taskDelete"))
}

// Task is the resolver for the task field.
func (r *queryResolver) Task(ctx context.Context, id uint) (*task.Task, error) {
	return r.TasksService.GetTaskByID(id)
}

// Tasks is the resolver for the tasks field.
func (r *queryResolver) Tasks(ctx context.Context) ([]*task.Task, error) {
	return r.TasksService.GetAllTasks()
}
