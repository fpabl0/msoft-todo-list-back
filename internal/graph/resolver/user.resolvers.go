package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"

	"github.com/msoft-g1/todo-list-backend/internal/domain/task"
	"github.com/msoft-g1/todo-list-backend/internal/domain/user"
	"github.com/msoft-g1/todo-list-backend/internal/graph/generated"
	"github.com/msoft-g1/todo-list-backend/internal/graph/modelgen"
)

// UserCreate is the resolver for the userCreate field.
func (r *mutationResolver) UserCreate(ctx context.Context, input user.CreateInput) (*modelgen.UserCreatePayload, error) {
	u, err := r.UsersService.CreateUser(&input)
	if err != nil {
		return &modelgen.UserCreatePayload{Error: makeAppError(err)}, nil
	}
	return &modelgen.UserCreatePayload{User: u}, nil
}

// UserAccessTokenCreate is the resolver for the userAccessTokenCreate field.
func (r *mutationResolver) UserAccessTokenCreate(ctx context.Context, input user.AccessTokenCreateInput) (*modelgen.UserAccessTokenCreatePayload, error) {
	token, err := r.UsersService.CreateAccessToken(&input)
	if err != nil {
		return &modelgen.UserAccessTokenCreatePayload{Error: makeAppError(err)}, nil
	}
	return &modelgen.UserAccessTokenCreatePayload{UserAccessToken: &token}, nil
}

// UserAccessTokenRenew is the resolver for the userAccessTokenRenew field.
func (r *mutationResolver) UserAccessTokenRenew(ctx context.Context, token string) (*modelgen.UserAccessTokenRenewPayload, error) {
	newToken, err := r.UsersService.RenewAccessToken(token)
	if err != nil {
		return &modelgen.UserAccessTokenRenewPayload{Error: makeAppError(err)}, nil
	}
	return &modelgen.UserAccessTokenRenewPayload{UserAccessToken: &newToken}, nil
}

// CurrentUser is the resolver for the currentUser field.
func (r *queryResolver) CurrentUser(ctx context.Context) (*user.User, error) {
	data := user.AuthForContext(ctx)
	if data == nil {
		return nil, nil
	}
	return r.UsersService.GetUserByID(data.UserID)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id uint) (*user.User, error) {
	return r.UsersService.GetUserByID(id)
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*user.User, error) {
	return r.UsersService.GetAllUsers()
}

// Tasks is the resolver for the tasks field.
func (r *userResolver) Tasks(ctx context.Context, obj *user.User) ([]*task.Task, error) {
	if obj == nil {
		return nil, nil
	}
	return r.TasksService.GetTasksByUser(obj.ID)
}

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type userResolver struct{ *Resolver }
